[{"/home/lord/Documents/pbwealth/merng stack/client/src/index.js":"1","/home/lord/Documents/pbwealth/merng stack/client/src/App.js":"2","/home/lord/Documents/pbwealth/merng stack/client/src/pages/Home.js":"3","/home/lord/Documents/pbwealth/merng stack/client/src/pages/Register.js":"4","/home/lord/Documents/pbwealth/merng stack/client/src/pages/Login.js":"5","/home/lord/Documents/pbwealth/merng stack/client/src/components/Menu.js":"6","/home/lord/Documents/pbwealth/merng stack/client/src/components/PostCard.js":"7","/home/lord/Documents/pbwealth/merng stack/client/src/utils/hooks.js":"8","/home/lord/Documents/pbwealth/merng stack/client/src/utils/auth.js":"9","/home/lord/Documents/pbwealth/merng stack/client/src/utils/AuthRoute.js":"10","/home/lord/Documents/pbwealth/merng stack/client/src/components/PostForm.js":"11","/home/lord/Documents/pbwealth/merng stack/client/src/utils/graphql.js":"12","/home/lord/Documents/pbwealth/merng stack/client/src/utils/MyPopup.js":"13","/home/lord/Documents/pbwealth/merng stack/client/src/components/LikeButton.js":"14","/home/lord/Documents/pbwealth/merng stack/client/src/components/DeleteButton.js":"15","/home/lord/Documents/pbwealth/merng stack/client/src/pages/SinglePost.js":"16"},{"size":914,"mtime":1607412573103,"results":"17","hashOfConfig":"18"},{"size":958,"mtime":1607324387861,"results":"19","hashOfConfig":"18"},{"size":1308,"mtime":1607372838124,"results":"20","hashOfConfig":"18"},{"size":2546,"mtime":1607324761004,"results":"21","hashOfConfig":"18"},{"size":1661,"mtime":1607223508422,"results":"22","hashOfConfig":"18"},{"size":1512,"mtime":1607224086738,"results":"23","hashOfConfig":"18"},{"size":1405,"mtime":1607370507922,"results":"24","hashOfConfig":"18"},{"size":445,"mtime":1607220210128,"results":"25","hashOfConfig":"18"},{"size":1363,"mtime":1607224362821,"results":"26","hashOfConfig":"18"},{"size":410,"mtime":1607230705074,"results":"27","hashOfConfig":"18"},{"size":1579,"mtime":1607253741654,"results":"28","hashOfConfig":"18"},{"size":161,"mtime":1607236974966,"results":"29","hashOfConfig":"18"},{"size":206,"mtime":1607256310957,"results":"30","hashOfConfig":"18"},{"size":1504,"mtime":1607324494386,"results":"31","hashOfConfig":"18"},{"size":1777,"mtime":1607327392471,"results":"32","hashOfConfig":"18"},{"size":4726,"mtime":1607373108593,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"nfykws",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"36"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"36"},"/home/lord/Documents/pbwealth/merng stack/client/src/index.js",[],["70","71"],"/home/lord/Documents/pbwealth/merng stack/client/src/App.js",[],"/home/lord/Documents/pbwealth/merng stack/client/src/pages/Home.js",[],"/home/lord/Documents/pbwealth/merng stack/client/src/pages/Register.js",[],"/home/lord/Documents/pbwealth/merng stack/client/src/pages/Login.js",[],"/home/lord/Documents/pbwealth/merng stack/client/src/components/Menu.js",[],"/home/lord/Documents/pbwealth/merng stack/client/src/components/PostCard.js",["72","73"],"import React, { useContext } from \"react\";\nimport { Card, Icon, Button, Label } from \"semantic-ui-react\";\nimport moment from \"moment\";\nimport { Link } from \"react-router-dom\";\nimport MyPopup from \"../utils/MyPopup\";\nimport { AuthContext } from \"../utils/auth\";\nimport LikeButton from \"./LikeButton\";\nimport DeleteButton from \"./DeleteButton\";\n\nfunction PostCard({\n  post: { body, createdAt, username, _id, likes, comments },\n}) {\n  const { user } = useContext(AuthContext);\n\n  return (\n    <div>\n      <Card fluid>\n        <Card.Content>\n          <Card.Header>{username}</Card.Header>\n          <Card.Meta as={Link} to={`/posts/${_id}`}>\n            {moment(createdAt).fromNow(true)}\n          </Card.Meta>\n          <Card.Description>{body}</Card.Description>\n        </Card.Content>\n        <Card.Content extra></Card.Content>\n        <div style={{ margin: \"20px\" }}>\n          <LikeButton post={_id} likeCount={likes?.length} likes={likes} />\n          <MyPopup content=\"Comment on post\">\n            <Button labelPosition=\"right\" as={Link} to={`/posts/${_id}`}>\n              <Button color=\"blue\" basic>\n                <Icon name=\"comments\" />\n              </Button>\n              <Label basic color=\"blue\" pointing=\"left\">\n                {comments?.length}\n              </Label>\n            </Button>\n          </MyPopup>\n        </div>\n      </Card>\n    </div>\n  );\n}\n\nexport default PostCard;\n","/home/lord/Documents/pbwealth/merng stack/client/src/utils/hooks.js",[],"/home/lord/Documents/pbwealth/merng stack/client/src/utils/auth.js",[],"/home/lord/Documents/pbwealth/merng stack/client/src/utils/AuthRoute.js",[],"/home/lord/Documents/pbwealth/merng stack/client/src/components/PostForm.js",[],"/home/lord/Documents/pbwealth/merng stack/client/src/utils/graphql.js",[],["74","75"],"/home/lord/Documents/pbwealth/merng stack/client/src/utils/MyPopup.js",[],"/home/lord/Documents/pbwealth/merng stack/client/src/components/LikeButton.js",[],"/home/lord/Documents/pbwealth/merng stack/client/src/components/DeleteButton.js",[],"/home/lord/Documents/pbwealth/merng stack/client/src/pages/SinglePost.js",["76"],"import React, { useContext, useState, useRef } from \"react\";\nimport { useQuery, useMutation, gql } from \"@apollo/client\";\nimport moment from \"moment\";\nimport {\n  Button,\n  Card,\n  Form,\n  Grid,\n  Image,\n  Icon,\n  Label,\n} from \"semantic-ui-react\";\n\nimport { AuthContext } from \"../utils/auth\";\nimport LikeButton from \"../components/LikeButton\";\nimport DeleteButton from \"../components/DeleteButton\";\nimport MyPopup from \"../utils/MyPopup\";\n\nfunction SinglePost(props) {\n  const postId = props.match.params.postId;\n  const { user } = useContext(AuthContext);\n  const commentInputRef = useRef(null);\n\n  const [comment, setComment] = useState(\"\");\n\n  const { data } = useQuery(FETCH_POST_QUERY, {\n    variables: {\n      postId,\n    },\n  });\n\n  const [submitComment] = useMutation(SUBMIT_COMMENT_MUTATION, {\n    update() {\n      setComment(\"\");\n      commentInputRef.current.blur();\n    },\n    variables: {\n      postId,\n      body: comment,\n    },\n  });\n\n  function deletePostCallback() {\n    props.history.push(\"/\");\n  }\n\n  let postMarkup;\n  if (!data?.getPost) {\n    postMarkup = <p>Loading post..</p>;\n  } else {\n    const { _id, body, createdAt, username, comments, likes } = data.getPost;\n\n    postMarkup = (\n      <Grid>\n        <Grid.Row>\n          <Grid.Column width={2}>\n            <Image\n              src=\"https://react.semantic-ui.com/images/avatar/large/molly.png\"\n              size=\"small\"\n              float=\"right\"\n            />\n          </Grid.Column>\n          <Grid.Column width={14}>\n            <Card fluid>\n              <Card.Content>\n                <Card.Header>{username}</Card.Header>\n                <Card.Meta>{moment(createdAt).fromNow()}</Card.Meta>\n                <Card.Description>{body}</Card.Description>\n              </Card.Content>\n              <hr />\n              <Card.Content extra>\n                <LikeButton post={_id} likeCount={likes.length} likes={likes} />\n                <MyPopup content=\"Comment on post\">\n                  <Button\n                    as=\"div\"\n                    labelPosition=\"right\"\n                    onClick={() => (user ? \" \" : alert(\"please signin\"))}\n                  >\n                    <Button basic color=\"blue\">\n                      <Icon name=\"comments\" />\n                    </Button>\n                    <Label basic color=\"blue\" pointing=\"left\">\n                      {comments.length}\n                    </Label>\n                  </Button>\n                </MyPopup>\n              </Card.Content>\n            </Card>\n            {user && (\n              <Card fluid>\n                <Card.Content>\n                  <p>Post a comment</p>\n                  <Form>\n                    <div className=\"ui action input fluid\">\n                      <input\n                        type=\"text\"\n                        placeholder=\"Comment..\"\n                        name=\"comment\"\n                        value={comment}\n                        onChange={(event) => setComment(event.target.value)}\n                        ref={commentInputRef}\n                      />\n                      <button\n                        type=\"submit\"\n                        className=\"ui button teal\"\n                        disabled={comment.trim() === \"\"}\n                        onClick={submitComment}\n                      >\n                        Submit\n                      </button>\n                    </div>\n                  </Form>\n                </Card.Content>\n              </Card>\n            )}\n            {comments?.map((comment) => (\n              <Card fluid key={comment._id}>\n                <Card.Content>\n                  {user && user.username === comment.username && (\n                    <DeleteButton postId={_id} commentId={comment._id} />\n                  )}\n                  <Card.Header>{comment.username}</Card.Header>\n                  <Card.Meta>{moment(comment.createdAt).fromNow()}</Card.Meta>\n                  <Card.Description>{comment.body}</Card.Description>\n                </Card.Content>\n              </Card>\n            ))}\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n    );\n  }\n  return postMarkup;\n}\n\nconst SUBMIT_COMMENT_MUTATION = gql`\n  mutation($postId: String!, $body: String!) {\n    createComment(postId: $postId, body: $body) {\n      _id\n      comments {\n        _id\n        body\n        createdAt\n        username\n      }\n    }\n  }\n`;\n\nconst FETCH_POST_QUERY = gql`\n  query($postId: ID!) {\n    getPost(postId: $postId) {\n      _id\n      body\n      createdAt\n      username\n      comments {\n        _id\n        body\n        createdAt\n        username\n      }\n      likes {\n        _id\n        username\n        createdAt\n      }\n    }\n  }\n`;\n\nexport default SinglePost;\n",{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","severity":1,"message":"82","line":8,"column":8,"nodeType":"83","messageId":"84","endLine":8,"endColumn":20},{"ruleId":"81","severity":1,"message":"85","line":13,"column":11,"nodeType":"83","messageId":"84","endLine":13,"endColumn":15},{"ruleId":"77","replacedBy":"86"},{"ruleId":"79","replacedBy":"87"},{"ruleId":"81","severity":1,"message":"88","line":43,"column":12,"nodeType":"83","messageId":"84","endLine":43,"endColumn":30},"no-native-reassign",["89"],"no-negated-in-lhs",["90"],"no-unused-vars","'DeleteButton' is defined but never used.","Identifier","unusedVar","'user' is assigned a value but never used.",["89"],["90"],"'deletePostCallback' is defined but never used.","no-global-assign","no-unsafe-negation"]