{"version":3,"sources":["utils/MyPopup.js","utils/auth.js","components/LikeButton.js","utils/graphql.js","components/DeleteButton.js","components/PostCard.js","utils/hooks.js","components/PostForm.js","pages/Home.js","pages/Login.js","pages/Register.js","components/Menu.js","utils/AuthRoute.js","pages/SinglePost.js","App.js","index.js"],"names":["MyPopup","content","children","Popup","inverted","trigger","initialState","user","localStorage","getItem","decodedToken","jwtDecode","exp","Date","now","removeItem","AuthContext","createContext","login","userData","logout","authReducer","state","action","type","payload","AuthProvider","props","useReducer","dispatch","Provider","value","setItem","token","LIKE_POST_MUTATION","gql","LikeButton","useContext","post","likeCount","likes","useState","liked","setLiked","useEffect","find","like","username","useMutation","variables","postId","likePost","likeButton","Button","color","Icon","name","as","Link","to","basic","labelPosition","onClick","Label","pointing","FETCH_POSTS_QUERY","DELETE_POST_MUTATION","DELETE_COMMENT_MUTATION","DeleteButton","commentId","callback","confirmOpen","setConfirmOpen","mutation","update","proxy","data","readQuery","query","getPosts","filter","p","id","writeQuery","deletePostOrMutation","floated","style","margin","Confirm","open","onCancel","onConfirm","PostCard","body","createdAt","_id","comments","Card","fluid","Content","Header","Meta","moment","fromNow","Description","extra","length","useForm","values","setValues","onChange","e","target","onSubmit","event","preventDefault","CREATE_POST_MUTATION","PostForm","createPost","result","error","Form","Field","Input","placeholder","Home","useQuery","loading","Grid","columns","Row","padding","Column","map","marginBotton","LOGIN_USER","Login","setError","loginUser","password","history","push","onError","err","networkError","errors","message","className","noValidate","label","primary","REGISTER_USER","Register","addUser","email","confirmPassword","console","log","register","MenuBar","pathname","window","location","path","substr","activeItem","setActiveItem","handleItemClick","Menu","secondary","size","Item","active","position","AuthRoute","Component","component","rest","render","SUBMIT_COMMENT_MUTATION","FETCH_POST_QUERY","SinglePost","postMarkup","match","params","commentInputRef","useRef","comment","setComment","current","blur","submitComment","getPost","width","Image","src","float","alert","ref","disabled","trim","App","Container","exact","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.9e49b3d0.chunk.js","sourcesContent":["import { Popup } from \"semantic-ui-react\";\nimport React from \"react\";\n\nfunction MyPopup({ content, children }) {\n  return <Popup inverted content={content} trigger={children} />;\n}\n\nexport default MyPopup;\n","import React, { useReducer, createContext } from \"react\";\nimport jwtDecode from \"jwt-decode\";\nconst initialState = {\n  user: null,\n};\n\n/**this id for persisting state */\nif (localStorage.getItem(\"jwtToken\")) {\n  const decodedToken = jwtDecode(localStorage.getItem(\"jwtToken\"));\n\n  if (decodedToken.exp * 1000 < Date.now()) {\n    localStorage.removeItem(\"jwtToken\");\n  } else {\n    initialState.user = decodedToken;\n  }\n}\n\nconst AuthContext = createContext({\n  user: null,\n  login: (userData) => {},\n  logout: () => {},\n});\n\nfunction authReducer(state, action) {\n  switch (action.type) {\n    case \"LOGIN\":\n      return {\n        ...state,\n        user: action.payload,\n      };\n    case \"LOGOUT\":\n      return {\n        ...state,\n        user: null,\n      };\n    default:\n      return state;\n  }\n}\n\nfunction AuthProvider(props) {\n  /**useReducer takes it the state and reducer */\n  const [state, dispatch] = useReducer(authReducer, initialState);\n\n  function login(userData) {\n    localStorage.setItem(\"jwtToken\", userData.token);\n    dispatch({\n      type: \"LOGIN\",\n      payload: userData,\n    });\n  }\n\n  function logout() {\n    localStorage.removeItem(\"jwtToken\");\n    dispatch({ type: \"LOGOUT\" });\n  }\n\n  return (\n    <AuthContext.Provider\n      value={{ user: state.user, login, logout }}\n      {...props}\n    />\n  );\n}\n\nexport { AuthContext, AuthProvider };\n","import React, { useEffect, useState, useContext } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useMutation, gql } from \"@apollo/client\";\nimport { Button, Label, Icon } from \"semantic-ui-react\";\nimport MyPopup from \"../utils/MyPopup\";\nimport { AuthContext } from \"../utils/auth\";\n\nfunction LikeButton(props) {\n  const { user } = useContext(AuthContext);\n  const { post, likeCount, likes } = props;\n  const [liked, setLiked] = useState(false);\n  useEffect(() => {\n    if (user && likes.find((like) => like.username === user.username)) {\n      setLiked(true);\n    } else setLiked(false);\n  }, [user, likes]);\n\n  const [likePost] = useMutation(LIKE_POST_MUTATION, {\n    variables: { postId: post },\n  });\n\n  const likeButton = user ? (\n    liked ? (\n      <Button color=\"teal\">\n        <Icon name=\"heart\" />\n      </Button>\n    ) : (\n      <Button color=\"teal\" inverted>\n        <Icon name=\"heart\" />\n      </Button>\n    )\n  ) : (\n    <Button as={Link} to=\"/login\" color=\"teal\" basic>\n      <Icon name=\"heart\" />\n    </Button>\n  );\n\n  return (\n    <Button as=\"div\" labelPosition=\"right\" onClick={likePost}>\n      <MyPopup content={liked ? \"Unlike\" : \"Like\"}>{likeButton}</MyPopup>\n      <Label basic color=\"teal\" pointing=\"left\">\n        {likeCount}\n      </Label>\n    </Button>\n  );\n}\n\nconst LIKE_POST_MUTATION = gql`\n  mutation likePost($postId: ID!) {\n    likePost(postId: $postId) {\n      _id\n      likes {\n        _id\n        username\n      }\n    }\n  }\n`;\n\nexport default LikeButton;\n","import { gql } from \"@apollo/client\";\n\nexport const FETCH_POSTS_QUERY = gql`\n  {\n    getPosts {\n      _id\n      body\n      createdAt\n      username\n    }\n  }\n`;\n","import React, { useState } from \"react\";\nimport { useMutation, gql } from \"@apollo/client\";\nimport { Button, Confirm, Icon } from \"semantic-ui-react\";\n\nimport { FETCH_POSTS_QUERY } from \"../utils/graphql\";\nimport MyPopup from \"../utils/MyPopup\";\n\nfunction DeleteButton({ postId, commentId, callback }) {\n  const [confirmOpen, setConfirmOpen] = useState(false);\n\n  const mutation = commentId ? DELETE_COMMENT_MUTATION : DELETE_POST_MUTATION;\n\n  const [deletePostOrMutation] = useMutation(mutation, {\n    update(proxy) {\n      setConfirmOpen(false);\n      if (!commentId) {\n        const data = proxy.readQuery({\n          query: FETCH_POSTS_QUERY,\n        });\n        data.getPosts = data.getPosts.filter((p) => p.id !== postId);\n        proxy.writeQuery({ query: FETCH_POSTS_QUERY, data });\n      }\n      if (callback) callback();\n    },\n    variables: {\n      postId,\n      commentId,\n    },\n  });\n  return (\n    <>\n      <MyPopup content={commentId ? \"Delete comment\" : \"Delete post\"}>\n        <Button\n          as=\"div\"\n          color=\"red\"\n          floated=\"right\"\n          onClick={() => setConfirmOpen(true)}\n        >\n          <Icon name=\"trash\" style={{ margin: 0 }} />\n        </Button>\n      </MyPopup>\n      <Confirm\n        open={confirmOpen}\n        onCancel={() => setConfirmOpen(false)}\n        onConfirm={deletePostOrMutation}\n      />\n    </>\n  );\n}\n\nconst DELETE_POST_MUTATION = gql`\n  mutation deletePost($postId: ID!) {\n    deletePost(postId: $postId)\n  }\n`;\n\nconst DELETE_COMMENT_MUTATION = gql`\n  mutation deleteComment($postId: ID!, $commentId: ID!) {\n    deleteComment(postId: $postId, commentId: $commentId) {\n      _id\n      comments {\n        _id\n        username\n        createdAt\n        body\n      }\n    }\n  }\n`;\n\nexport default DeleteButton;\n","import React, { useContext } from \"react\";\nimport { Card, Icon, Button, Label } from \"semantic-ui-react\";\nimport moment from \"moment\";\nimport { Link } from \"react-router-dom\";\nimport MyPopup from \"../utils/MyPopup\";\nimport { AuthContext } from \"../utils/auth\";\nimport LikeButton from \"./LikeButton\";\nimport DeleteButton from \"./DeleteButton\";\n\nfunction PostCard({\n  post: { body, createdAt, username, _id, likes, comments },\n}) {\n  const { user } = useContext(AuthContext);\n\n  return (\n    <div>\n      <Card fluid>\n        <Card.Content>\n          <Card.Header>{username}</Card.Header>\n          <Card.Meta as={Link} to={`/posts/${_id}`}>\n            {moment(createdAt).fromNow(true)}\n          </Card.Meta>\n          <Card.Description>{body}</Card.Description>\n        </Card.Content>\n        <Card.Content extra></Card.Content>\n        <div style={{ margin: \"20px\" }}>\n          <LikeButton post={_id} likeCount={likes?.length} likes={likes} />\n          <MyPopup content=\"Comment on post\">\n            <Button labelPosition=\"right\" as={Link} to={`/posts/${_id}`}>\n              <Button color=\"blue\" basic>\n                <Icon name=\"comments\" />\n              </Button>\n              <Label basic color=\"blue\" pointing=\"left\">\n                {comments?.length}\n              </Label>\n            </Button>\n          </MyPopup>\n        </div>\n      </Card>\n    </div>\n  );\n}\n\nexport default PostCard;\n","import { useState } from \"react\";\n\nexport const useForm = (callback, initialState = {}) => {\n  /**inital state will be what we pass in */\n  const [values, setValues] = useState(initialState);\n  const onChange = (e) => {\n    setValues({\n      ...values,\n      [e.target.name]: e.target.value,\n    });\n  };\n  const onSubmit = (event) => {\n    event.preventDefault();\n    callback();\n  };\n  return {\n    onChange,\n    onSubmit,\n    values,\n  };\n};\n","import React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { useMutation, gql } from \"@apollo/client\";\n\nimport { useForm } from \"../utils/hooks\";\nimport { FETCH_POSTS_QUERY } from \"../utils/graphql\";\n\nfunction PostForm() {\n  const { values, onChange, onSubmit } = useForm(createPostCallback, {\n    body: \"\",\n  });\n\n  const [createPost, { error }] = useMutation(CREATE_POST_MUTATION, {\n    variables: values,\n    update(proxy, result) {\n      //readQuery grants us access to the posts in cache\n      const data = proxy.readQuery({\n        query: FETCH_POSTS_QUERY,\n      });\n      // we add this new post onto the posts\n      //we write this new data to our cache\n      proxy.writeQuery({\n        query: FETCH_POSTS_QUERY,\n        data: {\n          getPosts: [result.data.createPost, ...data.getPosts],\n        },\n      });\n      values.body = \"\";\n    },\n  });\n\n  function createPostCallback() {\n    createPost();\n  }\n\n  return (\n    <>\n      <Form onSubmit={onSubmit}>\n        <h2>Create a post:</h2>\n        <Form.Field>\n          <Form.Input\n            placeholder=\"Hi World!\"\n            name=\"body\"\n            onChange={onChange}\n            value={values.body}\n            error={error ? true : false}\n          />\n          <Button type=\"submit\" color=\"teal\">\n            Submit\n          </Button>\n        </Form.Field>\n      </Form>\n    </>\n  );\n}\n\nconst CREATE_POST_MUTATION = gql`\n  mutation createPost($body: String!) {\n    createPost(body: $body) {\n      _id\n      body\n      createdAt\n      username\n    }\n  }\n`;\n\nexport default PostForm;\n","import React, { useContext } from \"react\";\nimport { gql, useQuery } from \"@apollo/client\";\nimport { Grid } from \"semantic-ui-react\";\nimport PostCard from \"../components/PostCard\";\nimport { AuthContext } from \"../utils/auth\";\nimport PostForm from \"../components/PostForm\";\nfunction Home() {\n  const { loading, data } = useQuery(FETCH_POSTS_QUERY);\n  const { user } = useContext(AuthContext);\n\n  return (\n    <div>\n      <Grid columns={1}>\n        <Grid.Row>\n          <h2 style={{ padding: \"20px\" }}>Recent Posts</h2>\n        </Grid.Row>\n        {user && (\n          <Grid.Column>\n            <PostForm />\n          </Grid.Column>\n        )}\n        <Grid.Row>\n          {!loading && data?.getPosts ? (\n            data?.getPosts.map((post) => (\n              <Grid.Column key={post._id} style={{ marginBotton: \"20px\" }}>\n                <PostCard post={post} />\n              </Grid.Column>\n            ))\n          ) : (\n            <h1>loading..</h1>\n          )}\n        </Grid.Row>\n      </Grid>\n    </div>\n  );\n}\nconst FETCH_POSTS_QUERY = gql`\n  {\n    getPosts {\n      _id\n      body\n      username\n      createdAt\n      likes {\n        _id\n        createdAt\n        username\n      }\n      comments {\n        _id\n        createdAt\n        username\n        body\n      }\n    }\n  }\n`;\nexport default Home;\n","import React, { useContext, useState } from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { gql, useMutation } from \"@apollo/client\";\nimport { useForm } from \"../utils/hooks\";\nimport { AuthContext } from \"../utils/auth\";\nfunction Login(props) {\n  const [error, setError] = useState(\"\");\n  const { login } = useContext(AuthContext);\n  const { onChange, onSubmit, values } = useForm(LoginUser, {\n    username: \"\",\n    password: \"\",\n  });\n  const [loginUser, { loading }] = useMutation(LOGIN_USER, {\n    update(proxy, result) {\n      login(result.data.login);\n      props.history.push(\"/\");\n    },\n    onError(err) {\n      setError(err.networkError.result.errors[0].message);\n    },\n    variables: values,\n  });\n\n  function LoginUser() {\n    loginUser();\n  }\n\n  const { username, password } = values;\n  return (\n    <div className=\"form-container\">\n      <Form onSubmit={onSubmit} noValidate className={loading ? \"loading\" : \"\"}>\n        <h1>Login</h1>\n\n        <Form.Input\n          label=\"Username\"\n          placeholder=\"username..\"\n          name=\"username\"\n          type=\"text\"\n          value={username}\n          onChange={onChange}\n        />\n        <Form.Input\n          label=\"Password\"\n          placeholder=\"Password..\"\n          name=\"password\"\n          type=\"password\"\n          value={password}\n          onChange={onChange}\n        />\n        {error && <p style={{ color: \"red\" }}>{error}</p>}\n        <Button type=\"submit\" primary>\n          Register\n        </Button>\n      </Form>\n    </div>\n  );\n}\n\nconst LOGIN_USER = gql`\n  mutation register($username: String!, $password: String!) {\n    login(username: $username, password: $password) {\n      _id\n      email\n      username\n      createdAt\n      token\n    }\n  }\n`;\nexport default Login;\n","import React, { useContext, useState } from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { gql, useMutation } from \"@apollo/client\";\nimport { useForm } from \"../utils/hooks\";\nimport { AuthContext } from \"../utils/auth\";\n\nfunction Register(props) {\n  const [error, setError] = useState(\"\");\n  const { login } = useContext(AuthContext);\n  /**the reason we call registerUser instead of addUser is because it is not declared yet */\n  const { onChange, onSubmit, values } = useForm(registerUser, {\n    username: \"\",\n    email: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n  });\n\n  const { username, email, password, confirmPassword } = values;\n  /**we can put this before useForm because values will be undefined */\n  const [addUser, { loading }] = useMutation(REGISTER_USER, {\n    update(proxy, result) {\n      console.log(result);\n      login(result.data.register);\n      props.history.push(\"/\");\n    },\n    onError(error) {\n      setError(error.networkError.result.errors[0].message);\n    },\n    variables: values,\n  });\n\n  //!this must be a function to work\n  function registerUser() {\n    addUser();\n  }\n\n  return (\n    <div className=\"form-container\">\n      <Form onSubmit={onSubmit} noValidate className={loading ? \"loading\" : \"\"}>\n        <h1>Register</h1>\n        <Form.Input\n          label=\"Username\"\n          placeholder=\"Username..\"\n          name=\"username\"\n          type=\"text\"\n          value={username}\n          onChange={onChange}\n        />\n        <Form.Input\n          label=\"Email\"\n          placeholder=\"Email..\"\n          name=\"email\"\n          type=\"email\"\n          value={email}\n          onChange={onChange}\n        />\n        <Form.Input\n          label=\"Password\"\n          placeholder=\"Password..\"\n          name=\"password\"\n          type=\"password\"\n          value={password}\n          onChange={onChange}\n        />\n        <Form.Input\n          label=\"Confirm Password\"\n          placeholder=\"Confirm Password..\"\n          name=\"confirmPassword\"\n          type=\"password\"\n          value={confirmPassword}\n          onChange={onChange}\n        />\n        {error && <p style={{ color: \"red\" }}>{error}</p>}\n        <Button type=\"submit\" primary>\n          Register\n        </Button>\n      </Form>\n    </div>\n  );\n}\n\nconst REGISTER_USER = gql`\n  mutation register(\n    $username: String!\n    $email: String!\n    $password: String!\n    $confirmPassword: String!\n  ) {\n    register(\n      registerInput: {\n        username: $username\n        email: $email\n        password: $password\n        confirmPassword: $confirmPassword\n      }\n    ) {\n      _id\n      email\n      username\n      createdAt\n      token\n    }\n  }\n`;\nexport default Register;\n","import React, { useState, useContext } from \"react\";\nimport { Menu } from \"semantic-ui-react\";\nimport { Link } from \"react-router-dom\";\nimport { AuthContext } from \"../utils/auth\";\nfunction MenuBar() {\n  const { user, logout } = useContext(AuthContext);\n  const pathname = window.location.pathname;\n  const path = pathname === \"/\" ? \"home\" : pathname.substr(1);\n  const [activeItem, setActiveItem] = useState(path);\n  const handleItemClick = (e, { name }) => setActiveItem(name);\n\n  const MenuBar = user ? (\n    <Menu pointing secondary size=\"massive\" color=\"teal\">\n      <Menu.Item name={user.username} active as={Link} to=\"/\" />\n\n      <Menu.Menu position=\"right\">\n        <Menu.Item\n          name=\"logout\"\n          active={activeItem === \"login\"}\n          onClick={logout}\n        />\n      </Menu.Menu>\n    </Menu>\n  ) : (\n    <Menu pointing secondary size=\"massive\" color=\"teal\">\n      <Menu.Item\n        name=\"home\"\n        active={activeItem === \"home\"}\n        onClick={handleItemClick}\n        as={Link}\n        to=\"/\"\n      />\n\n      <Menu.Menu position=\"right\">\n        <Menu.Item\n          name=\"login\"\n          active={activeItem === \"login\"}\n          onClick={handleItemClick}\n          as={Link}\n          to=\"/login\"\n        />\n        <Menu.Item\n          name=\"register\"\n          active={activeItem === \"register\"}\n          onClick={handleItemClick}\n          as={Link}\n          to=\"/register\"\n        />\n      </Menu.Menu>\n    </Menu>\n  );\n\n  return MenuBar;\n}\n\nexport default MenuBar;\n","import React, { useContext } from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\n\nimport { AuthContext } from \"./auth\";\n\nfunction AuthRoute({ component: Component, ...rest }) {\n  const { user } = useContext(AuthContext);\n\n  return (\n    <Route\n      {...rest}\n      render={(props) =>\n        user ? <Redirect to=\"/\" /> : <Component {...props} />\n      }\n    />\n  );\n}\n\nexport default AuthRoute;\n","import React, { useContext, useState, useRef } from \"react\";\nimport { useQuery, useMutation, gql } from \"@apollo/client\";\nimport moment from \"moment\";\nimport {\n  Button,\n  Card,\n  Form,\n  Grid,\n  Image,\n  Icon,\n  Label,\n} from \"semantic-ui-react\";\n\nimport { AuthContext } from \"../utils/auth\";\nimport LikeButton from \"../components/LikeButton\";\nimport DeleteButton from \"../components/DeleteButton\";\nimport MyPopup from \"../utils/MyPopup\";\n\nfunction SinglePost(props) {\n  const postId = props.match.params.postId;\n  const { user } = useContext(AuthContext);\n  const commentInputRef = useRef(null);\n\n  const [comment, setComment] = useState(\"\");\n\n  const { data } = useQuery(FETCH_POST_QUERY, {\n    variables: {\n      postId,\n    },\n  });\n\n  const [submitComment] = useMutation(SUBMIT_COMMENT_MUTATION, {\n    update() {\n      setComment(\"\");\n      commentInputRef.current.blur();\n    },\n    variables: {\n      postId,\n      body: comment,\n    },\n  });\n\n  function deletePostCallback() {\n    props.history.push(\"/\");\n  }\n\n  let postMarkup;\n  if (!data?.getPost) {\n    postMarkup = <p>Loading post..</p>;\n  } else {\n    const { _id, body, createdAt, username, comments, likes } = data.getPost;\n\n    postMarkup = (\n      <Grid>\n        <Grid.Row>\n          <Grid.Column width={2}>\n            <Image\n              src=\"https://react.semantic-ui.com/images/avatar/large/molly.png\"\n              size=\"small\"\n              float=\"right\"\n            />\n          </Grid.Column>\n          <Grid.Column width={14}>\n            <Card fluid>\n              <Card.Content>\n                <Card.Header>{username}</Card.Header>\n                <Card.Meta>{moment(createdAt).fromNow()}</Card.Meta>\n                <Card.Description>{body}</Card.Description>\n              </Card.Content>\n              <hr />\n              <Card.Content extra>\n                <LikeButton post={_id} likeCount={likes.length} likes={likes} />\n                <MyPopup content=\"Comment on post\">\n                  <Button\n                    as=\"div\"\n                    labelPosition=\"right\"\n                    onClick={() => (user ? \" \" : alert(\"please signin\"))}\n                  >\n                    <Button basic color=\"blue\">\n                      <Icon name=\"comments\" />\n                    </Button>\n                    <Label basic color=\"blue\" pointing=\"left\">\n                      {comments.length}\n                    </Label>\n                  </Button>\n                </MyPopup>\n              </Card.Content>\n            </Card>\n            {user && (\n              <Card fluid>\n                <Card.Content>\n                  <p>Post a comment</p>\n                  <Form>\n                    <div className=\"ui action input fluid\">\n                      <input\n                        type=\"text\"\n                        placeholder=\"Comment..\"\n                        name=\"comment\"\n                        value={comment}\n                        onChange={(event) => setComment(event.target.value)}\n                        ref={commentInputRef}\n                      />\n                      <button\n                        type=\"submit\"\n                        className=\"ui button teal\"\n                        disabled={comment.trim() === \"\"}\n                        onClick={submitComment}\n                      >\n                        Submit\n                      </button>\n                    </div>\n                  </Form>\n                </Card.Content>\n              </Card>\n            )}\n            {comments?.map((comment) => (\n              <Card fluid key={comment._id}>\n                <Card.Content>\n                  {user && user.username === comment.username && (\n                    <DeleteButton postId={_id} commentId={comment._id} />\n                  )}\n                  <Card.Header>{comment.username}</Card.Header>\n                  <Card.Meta>{moment(comment.createdAt).fromNow()}</Card.Meta>\n                  <Card.Description>{comment.body}</Card.Description>\n                </Card.Content>\n              </Card>\n            ))}\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n    );\n  }\n  return postMarkup;\n}\n\nconst SUBMIT_COMMENT_MUTATION = gql`\n  mutation($postId: String!, $body: String!) {\n    createComment(postId: $postId, body: $body) {\n      _id\n      comments {\n        _id\n        body\n        createdAt\n        username\n      }\n    }\n  }\n`;\n\nconst FETCH_POST_QUERY = gql`\n  query($postId: ID!) {\n    getPost(postId: $postId) {\n      _id\n      body\n      createdAt\n      username\n      comments {\n        _id\n        body\n        createdAt\n        username\n      }\n      likes {\n        _id\n        username\n        createdAt\n      }\n    }\n  }\n`;\n\nexport default SinglePost;\n","import \"./App.css\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport Home from \"./pages/Home\";\nimport Login from \"./pages/Login\";\nimport Register from \"./pages/Register\";\nimport MenuBar from \"./components/Menu\";\nimport { Container } from \"semantic-ui-react\";\nimport { AuthProvider } from \"./utils/auth\";\nimport AuthRoute from \"./utils/AuthRoute\";\nimport SinglePost from \"./pages/SinglePost\";\n\nfunction App() {\n  return (\n    <AuthProvider>\n      <Router>\n        <Container>\n          <MenuBar />\n          <Switch>\n            <Route exact path=\"/\" component={Home} />\n            <AuthRoute exact path=\"/login\" component={Login} />\n            <AuthRoute exact path=\"/register\" component={Register} />\n            <Route exact path=\"/posts/:postId\" component={SinglePost} />\n          </Switch>\n        </Container>\n      </Router>\n    </AuthProvider>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport {\n  ApolloClient,\n  ApolloProvider,\n  InMemoryCache,\n  createHttpLink,\n} from \"@apollo/client\";\nimport { setContext } from \"@apollo/client/link/context\";\n\nconst httpLink = createHttpLink({\n  uri: \"https://merng-chat-app1.herokuapp.com/\",\n});\n\nconst authLink = setContext((_, { headers }) => {\n  // get the authentication token from local storage if it exists\n  const token = localStorage.getItem(\"jwtToken\");\n  // return the headers to the context so httpLink can read them\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : \"\",\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}